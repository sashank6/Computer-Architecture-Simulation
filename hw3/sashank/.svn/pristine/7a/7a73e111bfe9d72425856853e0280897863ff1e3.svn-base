/*
 * Your Tournament Branch Predictor goes here.
 * 
 * 
 */

public class TournamentPredictor extends BranchPredictor {

    public TournamentPredictor(int bm_tableSizeInBits, 
			       int gs_tableSizeInBits, int gs_historyLengthInBits, 
				  int chooserTableSizeInBits) {


    }
    
    /* Given a PC, return true if this branch predictor predicts that the branch is taken.
     * Return false if this branch predictor predicts that the branch is not taken.
     */
    boolean predictIfTaken(long PC) {

	return true;
    }

    /* Now you are given the PC and told whether the branch was taken or not.
     * Use this information to update your predictor.
     */
    void update(long PC, boolean wasTaken) {



    }

    void printHeader() {
    	System.out.format("PC\tChooseTable\tBimodTable\tGshareTable\t\tHist\tPred\tOutcome\tResult\t\tnIncorrect\n");
    }

    /* 
     * Technically, you don't have to implement this. It's here in case you want to
     * create the debugging outputs.
     */
    void printState() {

    }


}
